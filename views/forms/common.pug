mixin addScriptOnce(src)
  - this.scripts = this.scripts || {};
  if (!this.scripts[src])
    - this.scripts[src] = true
    script(src=src)

mixin addStyleOnce(href)
  - this.styles = this.styles || {};
  if (!this.styles[href])
    - this.styles[href] = true
    link(rel="stylesheet", href=href)

mixin showErrors(errors)
  each err in (errors || [])
    div.error= err.message

mixin formHeader(args)
  div.psu-form-header
    link(rel="stylesheet", href="/public/styles/psu-form-header.css")
    img(class="logo", src="/public/images/psu.png")
    h1.form-title= args.title
    div.university-name= args.universityName
    div.university-campus= args.universityCampus
    div.sem-sy.border
      span.sem  #{args.semester} semester : A.Y. #{args.schoolYear}
    div.date.border
      | date: #{args.date || (new Date).toDateString()}

mixin respondentConfirmForm(args)
    form.respondent(action=args.formAction, method="post")
      div.header.border profile of the respondent
      label Office / Department visited
      div.info
        div= args.office
        input(type="hidden", name="office", value=args.office)
      label Nature of service availed of
      div.info
        div= args.serviceAvail
        input(type="hidden", name="serviceAvail", value=args.serviceAvail)
      label Age
      div.info
        div= args.age
        input(type="hidden", name="age", value=args.age)
      label Client Category
      div.category
        - var category = (args.category || {})
        span= category.name
        input(type="hidden", name="category", value=category.code)

      label Comment / Feedback
      div.info
        | !{apputil.breakLines(args.comment)}
        input(type="hidden", name="comment", value=args.comment)

      label
      div.info.grid12
        input.grid12-left(type="submit", name="action", value="go back")
        input.grid12-right.pad10(type="submit", name="action", value="confirm submit")

mixin respondentForm(args)
    form.respondent(action=args.formAction, method="post")
      div
        input(type="hidden", name="officeCode")
        input(type="hidden", name="serviceCode")

      div.header.border profile of the respondent
      label Office / Department visited
      div.info
        input(name="office", value=args.office)
      label Nature of service availed of
      div.info
        input(name="serviceAvail", value=args.serviceAvail)
      label Age
      input(name="age", value=args.age)
      label Client Category
      div.category
        if (!args.categories)
          em (none)
        else
          - var category = args.category || args.categories[0].code
          each cat in (args.categories||[])
            span
              input(type="radio", name="category" value=cat.code,
                    checked=(category.code==cat.code))
              label #{cat.name}
              span.spc
              if (cat.hasData)
                input(name="data-"+cat.code)

      //-
        span.info.pad10
          input(type="checkbox", name="category" value="other")
          label Others, specify
          input.spc10(name="other-input")

      label
      div.info.center
        +showErrors(args.errors)

      label Comment / Feedback
      div.info
        textarea.fillw(name="comment")= args.comment

      label
      input(type="submit", value="submit")

      +addStyleOnce("/public/styles/autocom.css")
      +addScriptOnce("/public/scripts/lib/autocomplete.min.js")
      +addScriptOnce("/public/scripts/autocom.js")

      script
        | autocom.enable({
        |   fields: ["code", "name"],
        |   format: "{name}",
        |   input:  "input[name=office]",
        |   url:    "/api/fetch/offices",
        |   fetchOnce: true,
        |   output: {
        |       code: "input[name=officeCode]",
        |   }
        | })

      script
        | autocom.enable({
        |   fields: ["code", "name"],
        |   format: "{name}",
        |   input:  "input[name=serviceAvail]",
        |   url:    "/api/fetch/services",
        |   inputParams: ["input[name=office]"],
        |   output: {
        |       code: "input[name=serviceCode]",
        |   }
        | })


mixin surveyHeader(args)
  p blah
